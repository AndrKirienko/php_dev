    Docker - это сервис для запуска приложений в контейнерах

    Для чего он:
        - приложения запускаються в изолиравонной среде
        - легко запускать приложения на разных серверах
        - все зависимости приложений устанавливаються внутри контейнеров
        - легко масштабировать путем увеличение количества контейнеров
        - удобно пользоваться в процессе разработки приложений

    контенер - это самый маленький элемент в мире Docker и все приложения запускаються в нутки контейнеров. 
        - это некоторые маленькие программы большого проэкта

    
    Компоненты Docker:

    - client (клиент): с помощю клиента мы можем подключаться к службе докер
    - daemon (служба): отвечает за все задачи по созданию контейнеров и по обработке запросов от клиентов (докер сервер)
    - host (хост): это компьютер на котором запущен компьютер
    - container (контейнер): это оболочка для проэктов
    - image (образ): используються как основа для создания контейнеров
    - repositiry (репозиторий): тут находяться различные версии образов
    -registry (реестр): тут находяться различные репозитории. локальный/глобальный

---------------------------------------------------------------------------------

            ОБРАЗЫ

    Каждый образ - это набор слоев, каждый слой - это набор файлов. Образы статичны.

    Строение образов:
    - все слои read-only (только для чтения). Если слои уже созданы то уже не можем в них носить кориктеровки, но можем создавать другие образы
    - образы можно перемешать и удалять
    - образы хранятся в репозиториях. могут храниться разные версии образов
    - есть официальные образы и образы сообщества

--------------------------------------------------------------------------------

            РЕПОЗИТОРИЙ 

        Репозиторий - это набор различных версий какого-либо образа

        Характеристики:
        - храняться разные версии образа
        -разные версии померяються разными тегами
        - одна версия образа может иметь несколько тегов

-----------------------------------------------------------------------------------

            КОМАНДЫ

docker start <id> - запускает уже созданного контейнера

docker stop <id> - останавливает контейнер

docker ps -a -показывает список запущенных и остановлених контейнеров

docker ps - показывает список контейнеров

docker images - показывает список локальных образов

docker run <название образа> - создает и запускает контейнер

docker pull <название образа> - скачивает образ локально 

docker rm <id или имя контейнера> - удаление контейнера

docker run -i -t/ -it <название образа> - запустить контейнер

docker container prune - удалить отановленые контейнеры

docker container inspect <name> - все детали (информация) контейнера

docker stop <id или имя контейнера> - остановка контейнера

docker exec -it <id или имя контейнера> bash - выполняет команда в заупщенном 
контейнере, опции подключения интерактивного терминала, названия процесса

docker run -p 8080^80 <название образа> - открыть сервис  внутри образа

docker run -v ${PWD (пусть к локальной папке)}:usr/share/nginx/html(путь к папке 
внутки контейнера) nginx - подключение/меппинг тома

docker -d <id или имя контейнера> -запуск контейнера в бекраунде

docker run -it --rm (удалеть автоматически контейнер после его закрытия) <название контейнера>

docker run \
    --name my-nnginx - разбитие команд на разные строки

docker rmi --forse <id> - удалить єтот образ

docker image | grep <лючевое слово> отсортировать по ключевому слову

touch Dockerfile - створення файла для build, в цьому файлі можемо писати дериктиви (Этапы создани образов)

docker duild -t <образ> ./ - відбувається зкачування та підготовка до роботи 
 
docker duild -it -p <порт><назва образа> - перевіка порта




****зворотна сумістність****
--------------------------------------------------------------------

            ЄТАПИ СОЗДАНИЯ образов

    1) подключить в корень папки приложения Dockerfile

docker build .(путь к Dockerfile) - создание нового образа 
    -t <name><teg> - создать образ з своим названием и тегом
 

           СОДЕРЖИМОЕ Dockerfile


FROM <base image>

RUN <шлях до файлу> && touch < ім'я файлу> - запускає файла



WORKDIR </path>

COPY <source dest> (. .) -

CMD [ "python", "main.py" ]


----------------------------------------------------------------------


            DOCKER COMPOSE


    - позволяет запускать одновременно несколько контейнеров

    Интерактивный подход - базовый
    Декларативный подход (инструкци высокого уровня) - вручную вводим то что
хотим видеть

        ПЛЮСЫ:
    
    - все контейнеры запускаються одной командой
    - DNS возможно взаемодейставовать между контейнерами, используя именя сервисов


            СОДЕРЖИМОЕ DOCKER COMPOSE


    docker-compose up - запуск композ

    docker-compose down - зупинить контейнери
    version: '3.8'

    services:
        mariadb-container:
            image: mariadb:laters
            enviroment: 
                - MARIADB_USER=example-user
            port:
                - 3306:3306
            
      








