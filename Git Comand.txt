

			КОНФИГУРАЦИЯ

git config --global user.name "Andrew Kirienko" -сознадие акк
git config --global user.email ndrw.iieo@gmail.com

git config alias.c config (заготовки) - создания алиаса конфиг
			git c (git config)
git config alias.sayhi '!git ...; git ...' - выполнение сразу нескольких команд
			git sayhi 

git config --list (--global) - значения пареметров конфигурации
		cat ~/.gitconfig

git config --unset <user.name/email> or --remove section user - удалить всю секцию user
git --help config - декларація
git config -h - все команды конфиг
		/<поиск>
		n -вперёд
		shift+n - назад
		q - выход
		
cat .git/config - выводит все содержимое файла

-------------------------------------------------------------------

pwd - путь к текущей дериктории
git init - создать новий гит репозиторий

ls -Force - PowerShell
ls -la - Git BASH

git status - просмотр статуса папок
ls - просмотрт ветки
git log - просмотр всех комитов
cd .. - выйти на 1 уровень 
cd name-sm - вход на 1 уровень
git chekout <code>- перемещение между комитами
git cat-file -t <code> - переход по SHA1
git cat-file -p <code> - просмотр по SHA1
git help - документация

cat <name> - читать файл 

mkdir name-packeg - создание папки
rm name-packeg - удаление папки
echo "Text" > name-packeg.txt - создание файла

git add . - перемещение всех изменений в индекс
git commit -m "text" - создание комита

git branch <branch name> - создание новой ветри
git checkout -b <branch name> - создание и переход на ветку
git branch - просмотр всех веток
git branch -m <new branch name> - переименовать ветку
git checkout -d <branch name> - удаление ветки
git checkout <branch name> - переход на любую ветку
git diff 
git commit -am "message" - додавання всіх редагуваних файлів одразу в коміт
git stash - ctrl + x
git stash pop - ctrl + v


----------------------------------------------------------------------------------------
****************************************************************************************

git merge -m "text" <feature branch name> - обеденение веток 
(учитывает время, внедряет комиты веток в друг друга)
git rebase -m "text" (не учитывает время, комиты одной ветки ставяться поверх другой)
git merge-base <текущая вечтка> <с которой хочем слиться> - нахождение родительского комита
git checkout --ours <file> - игнорирование изменений в второстипенной ветке
			   - взять изменения в главной (нашей) ветке
git checkout --theirs <file> - взять изменение с второстипенной вести 
git reset --hard - все вернет до начала слияние веток
git reset --merge - он оставляет не закомиченые файлы которые не учавствовали в слиянии
git merge --abort - то же самое что и git reset --merge
git checkout --conflict=diff3 --merge <file>  - узнать изменение до розветление веток
git megre --continue - тот же функционал комит но только работает для состояние слияния


----------------------------------------
Конфликт				|
1) решаем вручную что нам надо оставить |
2) git add .				|
3) git commit -m "message"		|
4) git push 				|
----------------------------------------

******************************************************************************************
-------------------------------------------------------------------------------------------


rm -rf .git - уданение репозитория
git push - загрузить с локального на серверний
git pull - загрузить сервера на локальный
git clone <url> - клонирование удаленого репозитория в локальный
	что бы подключить нужно выйти из главной папки, 
	только потом клонировать
git remote - проверка каких либо удаленных серверов
git remote -v - проверка настроек удаленного сервера 
git branch -vv - просмотрт связи между локальной и серверной веткой  

git branch -a - отображать все абсолютно ветри с сервера

1) git remote add origin <url> - подклчение удаленного репозитория
2) git push -u origin <branch> - загрузка изменение из локальной в 
				серверную с создание связис ними


origin - название удаленного репозитория

---------------------------
1) созание файлов/проєктов |
2) git init		   |
3) git add .		   |
4)git commit -m "text"	   |
---------------------------

---------------------------------------------------------------------
загрузить свой репозиторий на Git Hub 				     |
								     |
1) git remote add origin https://github.com/AndrKirienko/php_dev.git |
2) git branch -M main						     |
3) git push -u origin main					     |
---------------------------------------------------------------------
